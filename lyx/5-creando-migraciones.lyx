#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\options letterpapper
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Creando Migraciones en Laravel 5 
\begin_inset CommandInset label
LatexCommand label
name "chap:Creando-Migraciones"

\end_inset


\end_layout

\begin_layout Standard
Las migraciones son una serie de archivos y clases en PHP que actúan como
 un control de versiones de base de datos, tanto para crear las tablas al
 inicio del desarrollo de nuestra aplicación, como para realizar cambios
 como agregar o eliminar una tabla, agregar o eliminar una columna y así
 sucesivamente, a medida que desarrollamos nuestro proyecto.
\end_layout

\begin_layout Standard
Las migraciones permiten definir las tablas con programación orientada a
 objetos en vez de SQL, lo cual nos da portabilidad a los diferentes motores
 que soporta Laravel: MySQL, Postgres, SQLite, y SQL Server.
\end_layout

\begin_layout Standard
También son ideales para que nuestro equipo de trabajo mantenga los cambios
 y pueda ejecutarlos con un comando en vez de estar adivinando que SQLs
 cargar y cuales no.
\end_layout

\begin_layout Standard
A pesar de su ventaja son totalmente opcionales, así que puedes prescindir
 de ellas y crear tus tablas con herramientas como PHPMyAdmin o SequelPro
 pero yo recomiendo usar las migraciones cada vez que se pueda.
\end_layout

\begin_layout Standard
Ir a lección: 
\begin_inset CommandInset href
LatexCommand href
name "Creando migraciones en Laravel 5"
target "http://duilio.me/creando-migraciones-en-laravel-5/"

\end_inset

.
\end_layout

\begin_layout Section
Material recomendado
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Videotutorial: migraciones en Laravel 4 "
target "http://duilio.me/migraciones-en-laravel/"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Cómo encadenar métodos con PHP "
target "http://duilio.me/como-encadenar-metodos-con-php-poo/"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Laravel Fundamental: Migrations "
target "https://laracasts.com/series/laravel-5-fundamentals/episodes/7"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Documentación oficial: Migrations & Seedings "
target "http://laravel.com/docs/5.0/migrations"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Documentación oficial: Schema Builder "
target "http://laravel.com/docs/5.0/schema"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Tutorial: configurar base de datos y migraciones en Laravel 4"
target "http://www.cristalab.com/tutoriales/configurar-base-de-datos-y-crear-tablas-con-laravel-c111394l/"

\end_inset


\end_layout

\begin_layout Section
Actividades
\end_layout

\begin_layout Itemize
Crea una nueva tabla usando una migración
\end_layout

\begin_layout Itemize
Modifica una tabla usando una migración 
\end_layout

\begin_layout Standard
Para crear la migración para la tabla de 
\series bold
users
\series default
 lo hacemos con la sigiente linea de comando:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	php artisan make:migration create_users_table
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Luego en la funcion 
\series bold
up
\series default
 del archivo generado en 
\series bold
database/migrations/
\series default
, crear los campos de la tabla:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	Schema::create('users', function(Blueprint $table)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

			$table->increments('id');
\end_layout

\begin_layout Plain Layout

			$table->string('first_name');
\end_layout

\begin_layout Plain Layout

			$table->string('last_name');
\end_layout

\begin_layout Plain Layout

			$table->string('email')->unique();
\end_layout

\begin_layout Plain Layout

			$table->string('password', 60);
\end_layout

\begin_layout Plain Layout

			$table->enum('type',['admin','user']);
\end_layout

\begin_layout Plain Layout

			$table->rememberToken();
\end_layout

\begin_layout Plain Layout

			$table->timestamps();
\end_layout

\begin_layout Plain Layout

	});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para crear la migración para la tabla de 
\series bold
user profiles
\series default
 lo hacemos con la sigiente linea de comando:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	php artisan make:migration create_user_profiles_table
\end_layout

\begin_layout Plain Layout

		
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Luego en la funcion 
\series bold
up
\series default
 del archivo generado en 
\series bold
database/migrations/
\series default
, crear los campos de la tabla:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	Schema::create('user_profiles', function(Blueprint $table)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			$table->increments('id');
\end_layout

\begin_layout Plain Layout

			$table->mediumText('bio')->nullable();
\end_layout

\begin_layout Plain Layout

			$table->string('twitter')->nullable();
\end_layout

\begin_layout Plain Layout

			$table->string('website')->nullable();
\end_layout

\begin_layout Plain Layout

			$table->integer('user_id')->unsigned();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			$table->foreign('user_id')
\end_layout

\begin_layout Plain Layout

                  ->references('id')
\end_layout

\begin_layout Plain Layout

                  ->on('users')
\end_layout

\begin_layout Plain Layout

                  ->onDelete('cascade');
\end_layout

\begin_layout Plain Layout

			$table->timestamps();
\end_layout

\begin_layout Plain Layout

	});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la consola instalamos nuestras migraciones con la siguiente línea de
 código:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	php artisan migrate:install
\end_layout

\end_inset


\end_layout

\begin_layout Section
Preguntas
\end_layout

\begin_layout Itemize
¿Cúales es la ventaja de usar migraciones? 
\end_layout

\begin_deeper
\begin_layout Itemize
Podemos manipular las tablas de nuestra base de datos con programación orientada
 a objetos 
\end_layout

\begin_layout Itemize
Permite que la aplicación pueda ser instalada en los distintos motores de
 base de datos aceptados por Laravel 
\end_layout

\end_deeper
\begin_layout Itemize
¿Cuando no se usan migraciones en un proyecto? 
\end_layout

\begin_deeper
\begin_layout Itemize
uando el proyecto es sencillo, con pocos o ningún cambio en la base de datos
 a futuro, la aplicación solo va a ser instalada en un solo motor de base
 de datos y no existe un grupo de trabajo que necesite tener el orden de
 las versiones de la base de datos.
 
\end_layout

\begin_layout Itemize
Cuando las tablas del proyecto ya fueron creadas por un tercero o provistas
 por el cliente 
\end_layout

\end_deeper
\end_body
\end_document
