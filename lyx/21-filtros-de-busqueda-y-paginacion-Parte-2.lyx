#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Filtros de búsqueda y paginación con Laravel 5 - Parte 2
\end_layout

\begin_layout Standard
Este capítulo es la continuación de la lección anterior donde aprendimos
 a buscar registros con Laravel, y por supuesto es parte del curso de Laravel
 5.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename filtros-paginacion-laravel-5-1024x232.png
	scale 88

\end_inset


\end_layout

\begin_layout Standard
Hoy aprenderemos cómo filtrar usuarios con 2 o más campos de búsqueda, además
 veremos cómo combinar la paginación de Laravel con los filtros que agregamos
 al módulo.
\end_layout

\begin_layout Standard
También aprenderemos a mantener los valores de búsqueda dentro del formulario,
 y a mover parte de la lógica al modelo para simplificar nuestro controlador
 y aplicar nuevamente el principio DRY.
 Ir a lección: 
\begin_inset CommandInset href
LatexCommand href
name "Filtros de búsqueda y paginación"
target "http://duilio.me/filtros-de-busqueda-y-paginacion-con-laravel-5/"

\end_inset


\end_layout

\begin_layout Section
Material relacionado
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Filtrar un listado de registros con Laravel 4 y Codeception "
target "http://duilio.me/filtrar-un-listado-de-registros-con-laravel-y-codeception/"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Filtrar registros con Laravel: Refactorización (DRY) "
target "http://duilio.me/filtrar-registros-con-laravel-parte-2-refactorizacion-principio-dry/"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Paginación de registros con Laravel 4 y Codeception "
target "http://duilio.me/paginacion-de-registros-con-laravel-y-codeception/"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Implementación del patrón repositorio (Repository Pattern) en Laravel"
target "http://duilio.me/implementacion-del-patron-repositorio-repository-pattern-en-laravel"

\end_inset


\end_layout

\begin_layout Section
Actividades
\end_layout

\begin_layout Subsection
Mueve el formulario de filtros a un partial 
\end_layout

\begin_layout Standard
Creamos el archivo 
\emph on
views/admin/users/partials/filters.blade.php
\emph default
 y colocamos el código de nuestros filtros:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	{!!Form::open(['route' => 'admin.users.index', 'method' => 'GET','class'
 => 'navbar-form navbar-left pull-right', 'role' => 'search'])!!} 
\end_layout

\begin_layout Plain Layout

	<div class="form-group">     
\end_layout

\begin_layout Plain Layout

		{!!Form::text('name', null, ['class' => 'form-control', 'placeholder'
 => 'Nombre de usuario'])!!}     
\end_layout

\begin_layout Plain Layout

		{!!Form::select('type',['' => 'Seleccione un tipo','user' => 'user', 'visitor'
 => 'visitor','editor' => 'editor'],null, ['class' => 'form-control'])!!}
 
\end_layout

\begin_layout Plain Layout

	</div> 
\end_layout

\begin_layout Plain Layout

	{!!Form::close()!!}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Crea un botón para limpiar filtros o “ver todos los resultados” 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	<a href="{{route('admin.users.index')}}" class="btn btn-succes">Mostrar todos</a>
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Agrega un filtro adicional al módulo 
\end_layout

\begin_layout Standard
¿Qué les parece si agregamos un nuevo select a nuestro formulario para elegir
 el tipo de 
\emph on
estatus
\emph default
?,
\emph on
 
\emph default
así quedaría
\emph on
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	{!!Form::open(['route' => 'admin.users.index', 'method' => 'GET','class'
 => 'navbar-form navbar-left pull-right', 'role' => 'search'])!!} 
\end_layout

\begin_layout Plain Layout

	<div class="form-group">     
\end_layout

\begin_layout Plain Layout

		{!!Form::text('name', null, ['class' => 'form-control', 'placeholder'
 => 'Nombre de usuario'])!!}     
\end_layout

\begin_layout Plain Layout

		{!!Form::select('type',['' => 'Seleccione un tipo','user' => 'user', 'visitor'
 => 'visitor','editor' => 'editor'],null, ['class' => 'form-control'])!!}
\end_layout

\begin_layout Plain Layout

		{!!Form::select('active',['' => 'Estatus','true' => 'Activo', 'false'
 => 'Inactivo'],'true', ['class' => 'form-control'])!!} 
\end_layout

\begin_layout Plain Layout

	</div> 
\end_layout

\begin_layout Plain Layout

	{!!Form::close()!!}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Agregamos un nuevo 
\emph on
Scope 
\emph default
en nuestro Model 
\emph on
Users
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	public function scopeActive($query, $active){
\end_layout

\begin_layout Plain Layout

        if(trim($active) != ''){             
\end_layout

\begin_layout Plain Layout

			$query->where('active', $active);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ya que habíamos creado en los capítulos anteriores un método estático que
 realizara la busqeuda de nuestros usuarios con los filtros, simplemente
 agregamos la línea para hacer el llamado al la nueva función 
\emph on
Scope
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	static  function filterAndPaginate($request){
\end_layout

\begin_layout Plain Layout

        $users = User::name($request->get('name'))
\end_layout

\begin_layout Plain Layout

				->type($request->get('type'))
\end_layout

\begin_layout Plain Layout

				->active($request->get('active'))
\end_layout

\begin_layout Plain Layout

				->orderBy('first_name', 'ASC')
\end_layout

\begin_layout Plain Layout

				->paginate();
\end_layout

\begin_layout Plain Layout

        return $users;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Recordemos que estamos utilizando el siguiente llamado en nuestro controlador.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	$users = User::filterAndPaginate($request);
\end_layout

\end_inset


\end_layout

\end_body
\end_document
