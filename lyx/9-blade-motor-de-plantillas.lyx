#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Cambios al motor de plantillas Blade en Laravel 5
\end_layout

\begin_layout Standard
Laravel 5 continua usando Blade como motor de plantillas.
\end_layout

\begin_layout Standard
Sin embargo hay algunos cambios que hay que tener en cuenta si ya has usado
 Laravel 4:
\end_layout

\begin_layout Standard
Las vistas ahora se encuentran en resources/views Las etiquetas de Blade
 {{ $var }} y {{{ $var }}} ahora escapan los datos automáticamente (para
 protegernos de ataques XSS) Laravel 5 agregó una nueva etiqueta: {!! $var
 !!} que vamos a usarla cuando queremos generar HTML dentro de la etiqueta
 (el contenido dentro de {!! !!} no será escapado por Laravel) Los componentes
 de Form y Html fueron separados a un paquete aparte (esto lo veremos en
 la clase siguiente)
\end_layout

\begin_layout Standard
Ir a la lección: 
\begin_inset CommandInset href
LatexCommand href
name "Blade el motor de plantillas"
target "http://duilio.me/cambios-al-motor-de-plantillas-blade-en-laravel-5/"

\end_inset

.
\end_layout

\begin_layout Section
Tutoriales recomendados
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Tutorial básico de Blade en Laravel 4"
target "http://duilio.me/tutorial-basico-de-blade-el-sistema-de-plantillas-de-laravel/"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Blade (documentación oficial) "
target "http://laravel.com/docs/5.0/templates"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Blade 101 (Laracasts)"
target "https://laracasts.com/series/laravel-5-fundamentals/episodes/5"

\end_inset


\end_layout

\begin_layout Section
Actividades
\end_layout

\begin_layout Subsection
Crea tus primeras páginas con Blade, pasando datos desde las rutas o los
 controladores a las vistas.
\end_layout

\begin_layout Standard
Para traer la infromación de un usuario y enviarla a la vista 
\emph on
users/index
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	$user = User::select('id', 'first_name', 'email', 'type')
\end_layout

\begin_layout Plain Layout

					->first();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return view('users.index', compact('user'));
\end_layout

\end_inset

Acontinuación el código de la vista que mostrará los datosde los usuarios
 formateados en una tabla:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	<html>
\end_layout

\begin_layout Plain Layout

	<head>
\end_layout

\begin_layout Plain Layout

		<link href='//fonts.googleapis.com/css?family=Lato:100' rel='stylesheet'
 type='text/css'>
\end_layout

\begin_layout Plain Layout

		<link href="/css/style.css" rel="stylesheet">
\end_layout

\begin_layout Plain Layout

		<link href="/css/app.css" rel="stylesheet">
\end_layout

\begin_layout Plain Layout

	</head>
\end_layout

\begin_layout Plain Layout

	<body>
\end_layout

\begin_layout Plain Layout

	<div class="container">
\end_layout

\begin_layout Plain Layout

		<div class="content">
\end_layout

\begin_layout Plain Layout

		<div class="title">Laravel 5</div>
\end_layout

\begin_layout Plain Layout

		<h1>Listado de usuarios</h1>
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		<table class="table table-striped">
\end_layout

\begin_layout Plain Layout

		<tr>
\end_layout

\begin_layout Plain Layout

			<th>id</th>
\end_layout

\begin_layout Plain Layout

			<th>Nombre</th>
\end_layout

\begin_layout Plain Layout

			<th>Email</th>
\end_layout

\begin_layout Plain Layout

			<th>Tipo</th>
\end_layout

\begin_layout Plain Layout

		</tr>
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		<tr>
\end_layout

\begin_layout Plain Layout

			<td>{{$user->id}}</td>
\end_layout

\begin_layout Plain Layout

			<td>{{$user->first_name}}</td>
\end_layout

\begin_layout Plain Layout

			<td>{{$user->email}}</td>
\end_layout

\begin_layout Plain Layout

			<td>{{$user->type}}</td>
\end_layout

\begin_layout Plain Layout

		</tr>
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		</table>
\end_layout

\begin_layout Plain Layout

		</div>
\end_layout

\begin_layout Plain Layout

	</div>
\end_layout

\begin_layout Plain Layout

	</body>
\end_layout

\begin_layout Plain Layout

	</html>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Intenta utilizar otras estructuras dentro de Blade como @foreach guiándote
 con la documentación oficial
\end_layout

\begin_layout Standard
Para traer la infromación de todos los usuario y enviarla a la vista 
\emph on
users/index
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	$users = User::select('id', 'first_name', 'email', 'type')
\end_layout

\begin_layout Plain Layout

					->orderBy('first_name', 'ASC')
\end_layout

\begin_layout Plain Layout

					->get();
\end_layout

\begin_layout Plain Layout

	return view('users.index', compact('users'));
\end_layout

\end_inset

Acontinuación el código para imprimir los datosde todos los usuarios, formateado
s en una tabla:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	<table class="table table-striped">    
\end_layout

\begin_layout Plain Layout

	<tr>        
\end_layout

\begin_layout Plain Layout

		<th>id</th>     
\end_layout

\begin_layout Plain Layout

		<th>Nombre</th> 
\end_layout

\begin_layout Plain Layout

		<th>Email</th>
\end_layout

\begin_layout Plain Layout

		<th>Tipo</th> 
\end_layout

\begin_layout Plain Layout

		<th>Acciones</th> 
\end_layout

\begin_layout Plain Layout

	</tr>
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	@foreach($users as $user)        
\end_layout

\begin_layout Plain Layout

		<tr>             
\end_layout

\begin_layout Plain Layout

			<td>{{$user->id}}</td>      
\end_layout

\begin_layout Plain Layout

			<td>{{$user->first_name}}</td>
\end_layout

\begin_layout Plain Layout

			<td>{{$user->email}}</td> 
\end_layout

\begin_layout Plain Layout

			<td>{{$user->type}}</td>    
\end_layout

\begin_layout Plain Layout

		</tr>     
\end_layout

\begin_layout Plain Layout

	@endforeach 
\end_layout

\begin_layout Plain Layout

	</table>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Agrega una sección adicional para que puedas personalizar parte del footer
 (o pie de página) del layout en las plantillas que lo extiendan (similar
 a como hicimos con la sección title)
\end_layout

\begin_layout Standard
Para ello debemos colocar en nuestro 
\emph on
layout.blade.php
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	@yield('footer')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La vista que requiera un footer personalizado, pasa la información a nuestro
 layout de esta manera:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	@section('footer')
\end_layout

\begin_layout Plain Layout

		Aqui el código de nuestro footer personalizado
\end_layout

\begin_layout Plain Layout

	@stop
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
La otra forma es colocar como segundo parámetro lo que va a tener esta sección
 por defecto de no se sobre-escrita por cualquier vista:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	@yield('foot','
\end_layout

\begin_layout Plain Layout

		</body>
\end_layout

\begin_layout Plain Layout

	</html>'
\end_layout

\begin_layout Plain Layout

	)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por último la vista que requiera un footer personalizado, pasa la información
 a nuestro layout de la siguiente forma, recordando que ahora debemo colocar
 las etiquetas 
\emph on
</body>
\emph default
 y 
\emph on
</html>
\emph default
 porque estamos sobre-escribiendo la información por defecto de esta sección.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	@section('footer')
\end_layout

\begin_layout Plain Layout

		Aqui el código de nuestro footer personalizado
\end_layout

\begin_layout Plain Layout

		</body>
\end_layout

\begin_layout Plain Layout

	</html>
\end_layout

\begin_layout Plain Layout

	@stop
\end_layout

\end_inset


\end_layout

\begin_layout Section
Preguntas
\end_layout

\begin_layout Itemize
¿Es Blade y otros motores de plantillas más lentos que usar PHP directamente?
 
\end_layout

\begin_deeper
\begin_layout Itemize
Blade convierte nuestro código en plantilla a “PHP puro y duro” y lo almacena
 en su "cache" de plantillas, por lo que no requiere reinterpretar el código
 de Blade cada vez que exista una petición.
 Dando como resultado respuestas tan rápidas como si escribiéramos las vistas
 con PHP plano.
 
\end_layout

\end_deeper
\begin_layout Itemize
Piensa en uno o más ejemplos de lógica de vista vs lógica de tu aplicación
\end_layout

\begin_deeper
\begin_layout Itemize
Vista: marcar un botón como seleccionado, mostrar o no un menú, mostrar
 o no un banner, mostrar errores o no de formulario.
 
\end_layout

\begin_layout Itemize
Aplicación: Verificar si el usuario está registrado o no, validación de
 los datos, etc..
 
\end_layout

\end_deeper
\begin_layout Itemize
¿Todos los proyectos en PHP tendrán vistas con Blade?
\end_layout

\begin_deeper
\begin_layout Itemize
No, puedes escribirlos con PHP plano (no recomendado).
 Además, hay proyectos donde construyes un API y sólo necesitas retornar
 datos en formato JSON y es un framework Javascript el que genera las vistas.
 
\end_layout

\end_deeper
\begin_layout Itemize
¿Qué otros motores de plantillas has usado?
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Smarty"
target "http://www.smarty.net/"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Twig"
target "http://twig.sensiolabs.org/"

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
