#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Aplicando el patrón de diseño de software DRY en Laravel 5
\end_layout

\begin_layout Standard
Tan importante como elegir un lenguaje o un framework para crear nuestra
 aplicación, es aplicar patrones de diseño de software.
\end_layout

\begin_layout Standard
Dichos patrones son maneras reusables de solucionar problemas comunes, y
 muchos de ellos son aplicables a diferentes lenguajes y frameworks de desarroll
o.
\end_layout

\begin_layout Standard
Hoy les quiero hablar del patrón DRY: no te repitas o “don’t repeat yourself”
 que es muy conocido y aplicado en la comunidad de Ruby on Rails pero también
 puede ser aplicado a Laravel y otros frameworks.
\end_layout

\begin_layout Standard
Este patrón consiste en la idea de evitar la duplicación de código tanto
 como sea posible, duplicar código hace a nuestra aplicación más difícil
 de mantener, brinda la posibilidad de crear muchas inconsistencias y conlleva
 a la larga a un mayor esfuerzo y tiempo de desarrollo.
\end_layout

\begin_layout Standard
“Copiar y pegar” es la opción más rápida cuando se nos presenta un problema,
 pero no suele ser la mejor opción.
\end_layout

\begin_layout Standard
Hoy veremos una pequeña comparación entre un controlador de Ruby on Rails
 y otro de Laravel 5 y cómo podemos aplicar el método DRY para nuestro UsersCont
roller.
\end_layout

\begin_layout Standard
Ir a lección: 
\begin_inset CommandInset href
LatexCommand href
name "Patrón de diseño de software DRY"
target "http://duilio.me/aplicando-el-patron-de-diseno-de-software-dry-en-laravel-5/"

\end_inset


\end_layout

\begin_layout Section
Material Recomendado
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Filtrar registros con Laravel 4"
target "http://duilio.me/filtrar-registros-con-laravel-parte-2-refactorizacion-principio-dry/"

\end_inset


\end_layout

\begin_layout Section
Actividad
\end_layout

\begin_layout Itemize
Si estás trabajando en un proyecto en Laravel actualmente, aplica el patrón
 DRY donde sea posible.
\end_layout

\begin_layout Section
Preguntas
\end_layout

\begin_layout Itemize
¿Qué otras formas se te ocurren o haz hecho para aplicar el patrón DRY a
 tus proyectos?
\end_layout

\begin_deeper
\begin_layout Itemize
Crear funciones reutilizables
\end_layout

\begin_layout Itemize
Utilizar un sistema de plantillas
\end_layout

\begin_layout Itemize
Normalización de bases de datos
\end_layout

\end_deeper
\end_body
\end_document
