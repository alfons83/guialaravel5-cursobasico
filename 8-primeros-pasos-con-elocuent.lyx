#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Fluent y Eloquent – Parte 2
\end_layout

\begin_layout Standard
Hoy comenzaremos a usar Eloquent, el ORM de Laravel.
\end_layout

\begin_layout Standard
Cuando trabajamos con bases de datos SQL, usamos un sistema de datos relacional,
 donde un registro es representado a través de columnas de una fila de la
 base de datos.
 Cada registro tiene una llave primary (primary key, PK o ID) y se relaciona
 con otros registros a través de claves foráneas (foreign keys o FK).
\end_layout

\begin_layout Standard
Sin embargo nuestros proyectos los estamos construyendo con PHP y programación
 orientada a objetos.
 En la POO los objetos se relacionan con otros a través de propiedades y
 métodos.
\end_layout

\begin_layout Standard
Como podemos ver, las bases de datos relacionales son incompatibles con
 la forma con la que trabajamos en la programación orientada a objetos.
\end_layout

\begin_layout Standard
Es por esto que los ORMs como Eloquent nos permiten mapear datos de la base
 de datos para convertirlos a objetos y viceversa, tomar un objeto y guardarlo
 como un registro de la base de datos.
\end_layout

\begin_layout Standard
Ir a la lección: 
\begin_inset CommandInset href
LatexCommand href
name "Fluent y Eloquent – Parte 2"
target "http://duilio.me/curso-de-laravel-5-fluent-y-eloquent-parte-2/"

\end_inset


\end_layout

\begin_layout Section
Material relacionado
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Mapeo objeto-relacional (Wikipedia)"
target "http://es.wikipedia.org/wiki/Mapeo_objeto-relacional"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Eloquent ORM (Documentación oficial) "
target "http://laravel.com/docs/5.0/eloquent"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Eloquent 101 (Laracasts) "
target "https://laracasts.com/series/laravel-5-fundamentals/episodes/8"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Eloquent Relationships (Laracasts) "
target "https://laracasts.com/series/laravel-5-fundamentals/episodes/14"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Uso de métodos mágicos en PHP"
target "http://duilio.me/uso-de-metodos-magicos-en-php/"

\end_inset


\end_layout

\begin_layout Section
Actividades
\end_layout

\begin_layout Subsection
Crea una tabla usando migraciones y seeders (
\begin_inset CommandInset ref
LatexCommand nameref
reference "chap:Creando-Migraciones"

\end_inset

).
 Luego crea un modelo para dicha tabla.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	php artisan make:model User
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Haz un par de consultas utilizando el nuevo modelo de Eloquent y concatenando
 los métodos de Fluent como vimos en la clase.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	$user = User::find(2);
\end_layout

\begin_layout Plain Layout

	dd($user->toArray());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Otra consulta pudiera ser:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	$users = User::where('type','=','user')
\end_layout

\begin_layout Plain Layout

				->with('profile')
\end_layout

\begin_layout Plain Layout

				->get();
\end_layout

\begin_layout Plain Layout

	dd($users->toArray());
\end_layout

\end_inset


\end_layout

\begin_layout Section
Preguntas
\end_layout

\begin_layout Itemize
¿Cuál es la principal razón por la cual es usan ORMs?
\end_layout

\begin_deeper
\begin_layout Itemize
Manejar las peticiones a la base de dato con programación orientada a objetos,
 ejemplo: filas como objetos, tablas como clases.
 
\end_layout

\end_deeper
\begin_layout Itemize
¿Es verdad que al usar un ORM no necesitaremos nunca usar ni saber SQL?
 
\end_layout

\begin_deeper
\begin_layout Itemize
No, en aplicaciones de mediano a gran tamaño, puede existir momentos donde
 se requiera de una sentencia SQL (por ejemplo un JOIN para una búsqueda
 más compleja, etc.
 
\end_layout

\end_deeper
\begin_layout Itemize
¿Cuál es la diferencia entre Fluent y Eloquent?
\end_layout

\begin_deeper
\begin_layout Itemize
La diferencia es que Fluent es un generador de sentencias SQL (o query builder)
 mientras que Eloquent es un ORM que maneja estas peticiones con programación
 orientada a objetos, lo cual hace que sea posible el uso de clases y objetos
 para nuestros registros.
\end_layout

\end_deeper
\end_body
\end_document
