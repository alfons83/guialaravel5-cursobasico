#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\options letterpapper
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Seeders y el componente Faker
\end_layout

\begin_layout Standard
Los seeders, son un recurso que nos permite cargar información a nuestras
 tablas para probar de manera sencilla y rápida el funcionamiento de nuestra
 aplicación (paginación, filtros, entre otros).
 Ya basta de estar insertando datos uno por uno, inventando nombres o colocando
 el típico y horrible “asdffasd” o “123”.
\end_layout

\begin_layout Standard
Los seeders se ubican en la carpeta 
\emph on
database/seeds
\emph default
 y puedes crear tantos como desees.
\end_layout

\begin_layout Standard
Cuando queremos crear un usuario tipo “admin” podemos hacerlo de forma manual
 en un seed, pero cuando queremos insertar muchos usuarios debe de existir
 una manera más agradable de lograrlo, ahí entra Faker.
\end_layout

\begin_layout Standard
Faker es un componente que genera datos para ti.
 De manera que con solo agregar el componente, hacer el llamado del mismo
 en el seed más unas simples líneas de códigos, podrás tener tantos datos
 como sean necesarios para evaluar tu aplicación correctamente.
\end_layout

\begin_layout Standard
Ir a lección: 
\begin_inset CommandInset href
LatexCommand href
name "Seeders y el complemento Faker"
target "http://duilio.me/seeders-y-el-componente-faker-en-laravel-5/"

\end_inset

.
\end_layout

\begin_layout Section
Tutoriales recomendados
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Videotutorial: listar registros con Laravel y Codeception"
target "http://duilio.me/listar-registros-con-laravel-y-codeception/"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Documentación de Faker "
target "https://github.com/fzaninotto/Faker"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Documentación oficial: migrations and seedings"
target "http://laravel.com/docs/5.0/migrations"

\end_inset


\end_layout

\begin_layout Section
Actividades
\end_layout

\begin_layout Subsection
Crea un seed e inserta un registro en una tabla.
\end_layout

\begin_layout Standard
Para ello debemos de crear una clase que extienda de Seeder en la carpeta
 
\series bold
database/seeds
\end_layout

\begin_layout Standard
Ejemplo: clase AdminUserSeeder.php
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	<?php 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		use Illuminate
\backslash
Database
\backslash
Seeder;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		Class AdminTableSeeder extends Seeder{
\end_layout

\begin_layout Plain Layout

		    
\end_layout

\begin_layout Plain Layout

		         public function run() {
\end_layout

\begin_layout Plain Layout

		    
\end_layout

\begin_layout Plain Layout

			
\backslash
DB::table('users')->insert(array(
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	          "first_name"  => "Rafael",
\end_layout

\begin_layout Plain Layout

	          "last_name"   => "Torrealba",
\end_layout

\begin_layout Plain Layout

	          "email"       => "rafaeltorrealba6@gmail.com",
\end_layout

\begin_layout Plain Layout

	          "password"    => 
\backslash
Hash::make("secret"),
\end_layout

\begin_layout Plain Layout

	          "type"        => "admin",
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		       ));
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		     }
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	?>	
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la función run del archivo 
\series bold
database/seeds/DatabaseSeeds
\series default
 agregar el llamado al seed que creamos: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	$this->call('AdminTableSeeder');
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Luego instalamos de nuevo la migracion pero con el parametro 
\series bold
--seed
\series default
 para que leea los seeders:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	php artisan migrate:refresh --seed
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Instala Faker e inserta varios registros en una tabla.
\end_layout

\begin_layout Standard
Lo primero que debemos de hacer es instalar el complemento, para ello debemos
 de colocar la siguiente líena de código en nuestro archivo 
\series bold
 composer.json 
\series default
 en la parte "require-dev":
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	"fzaninotto/faker": "1.5.*@dev"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Luego actualizamos composer en en la consola con el siguiente comando:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	composer update
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Luego agregar la siguiente línea para llamar el complemento en nuestro controlad
or y colocarle un alias 
\emph on
Faker
\emph default
: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	use Faker
\backslash
Factory as Faker;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como siguiente paso, tenemos: crear un nuevo objeto y utilizar las funciones
 de complemento para que genere los datos, además| utilizar un ciclo for
 para repetir el proceso tantas veces como usuarios querramos crear.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	$faker = Faker::create();
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	for($i = 0; $i < 30; $i ++)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		$id = 
\backslash
DB::table('users')->insert(array(
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		'first_name'  => $faker->firstName(),
\end_layout

\begin_layout Plain Layout

		'last_name'   => $faker->lastName,
\end_layout

\begin_layout Plain Layout

		'email'	     => $faker->unique()->email,
\end_layout

\begin_layout Plain Layout

		'password'    => 
\backslash
Hash::make('secret'),
\end_layout

\begin_layout Plain Layout

		'type'        => 'user'
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		));
\end_layout

\begin_layout Plain Layout

	}	
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Inserta un registro en una tabla relacionada a otra.
\end_layout

\begin_layout Standard
Guardamos el 
\begin_inset Quotes fld
\end_inset

id
\begin_inset Quotes frd
\end_inset

 de usuario en una variable, para ello se utiliza la funcion insertGetId
 y luego insertamos los valores en el 
\emph on
profile
\emph default
 del mismo usuario.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

	$id = 
\backslash
DB::table('users')->insertGetId(array(
\end_layout

\begin_layout Plain Layout

		'first_name'  => $faker->firstName($gender),
\end_layout

\begin_layout Plain Layout

		'last_name'   => $faker->lastName,      
\end_layout

\begin_layout Plain Layout

		'email'       => $faker->unique()->email,                    
\end_layout

\begin_layout Plain Layout

		'password'    => 
\backslash
Hash::make('secret'),                 	
\end_layout

\begin_layout Plain Layout

		'type'        => 'user'
\end_layout

\begin_layout Plain Layout

	));
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	
\backslash
DB::table('user_profiles')->insert(array(
\end_layout

\begin_layout Plain Layout

		'user_id'   => $id,              
\end_layout

\begin_layout Plain Layout

		'bio'       => $faker->paragraph(rand(2,5)),
\end_layout

\begin_layout Plain Layout

		'website'   => 'http://www.'.$faker->domainName,      
\end_layout

\begin_layout Plain Layout

		'twitter'   => 'http://www.twiter.com/'.$faker->userName,
\end_layout

\begin_layout Plain Layout

	));
\end_layout

\end_inset


\end_layout

\begin_layout Section
Preguntas
\end_layout

\begin_layout Itemize
¿Cuál es la ventaja de los seeders?
\end_layout

\begin_deeper
\begin_layout Itemize
Nos permite cargar información (generalmente de pueba) a nuestras tablas
 de forma agradable para probar de forma rápida el funcionamiento de nuestra
 aplicación.
 
\end_layout

\end_deeper
\begin_layout Itemize
¿Cuál es la ventaja de Faker? 
\end_layout

\begin_deeper
\begin_layout Itemize
Faker genera información de prueba por nosotros, además de que nos ahorra
 tiempo, los datos de prueba van a tener relación con lo que se desee mostrar
 en las vistas.
 
\end_layout

\end_deeper
\begin_layout Itemize
¿En qué otros escenarios podemos usar Faker?
\end_layout

\begin_deeper
\begin_layout Itemize
Para generar datos de prueba para las vistas.
\end_layout

\end_deeper
\end_body
\end_document
