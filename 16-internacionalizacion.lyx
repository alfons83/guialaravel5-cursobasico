#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Crear una página web o aplicación en español con Laravel (i18n)
\end_layout

\begin_layout Standard
En este capítulo aprenderemos como traducir los mensajes de error y notificacion
es de nuestra aplicación al español o cualquier idioma.
\end_layout

\begin_layout Standard
Es muy común que nuestra aplicación deba soportar varios idiomas según las
 necesidades de nuestros usuarios.
 Laravel, facilita increíblemente la internacionalización (i18n) de los
 mensajes de nuestro sitio o aplicación web; ya sea a través de archivos
 de idioma o haciendo uso de la configuración de los servicios como Autenticació
n, utilizando los metodós disponibles como Lang::get o la función trans(),
 así como traducciones según parámetros y uso de singulares o plurales.
\end_layout

\begin_layout Standard
Hoy veremos por primera vez estas características, pasaremos nuestro sitio
 al español con la ayuda de un paquete y también les enseñaré cómo traducir
 los atributos y labels de nuestros formularios (que típicamente los escribimos
 en inglés).
\end_layout

\begin_layout Standard
Ir a la lección: 
\begin_inset CommandInset href
LatexCommand href
name "Internacionalización"
target "http://duilio.me/crear-un-sitio-o-aplicacion-en-espanol-con-laravel-i18n/"

\end_inset


\end_layout

\begin_layout Section
Material adicional
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Localization (Documentación oficial) "
target "http://laravel.com/docs/5.0/localization"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Traducciones para Laravel"
target "https://github.com/caouecs/Laravel4-lang/tree/laravel5"

\end_inset


\end_layout

\begin_layout Section
Actividades
\end_layout

\begin_layout Itemize
Instala el paquete de traducciones dentro de tu proyecto Traduce el formulario
 de registro que viene con Laravel
\end_layout

\begin_layout Section
Preguntas
\end_layout

\begin_layout Itemize
¿Es conveniente colocar cadenas de texto en nuestras vistas y controladores
 o debemos usar siempre trans()?
\end_layout

\begin_deeper
\begin_layout Itemize
Si solo va a utilizar un solo idioma, se puede utilizar texto sin ningún
 problema.
 Pero si se necesita o existe la posibilidad de que un futuro nuestra aplicación
 sea multi-idioma es preferible utilizar desde el inicio {{ trans() }} o
 @lang().
 
\end_layout

\end_deeper
\begin_layout Itemize
¿Cómo implementarías un sitio multi-idioma con Laravel?
\end_layout

\end_body
\end_document
